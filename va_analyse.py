# -*- coding: utf-8 -*-
"""
/***************************************************************************
 VLAnalyse
                                 A QGIS plugin
 Grupperer vannledningsnettverket inn i grupper basert på analyser av nettverket
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-06-25
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Norkart
        email                : larsan@norkart.no
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from qgis.core import *
from qgis.utils import iface
import xlrd
import sys

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
#from .vl_analyse_dialogR_base import VLAnalyseDialogR
from .va_analyse_dialog import VAAnalyseDialog
from .definitions import LagFarge, LagShape, FindReplace
from .resultatdialog import Ui_VAAnalyseDialogBaseResult, MyDialog
from .gruppering import filterObjekt
import os.path


class VAAnalyse:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'VAAnalyse_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&VA Analyse')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('VAAnalyse', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/va_analyse/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'VA Analyse'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&VA Analyse'),
                action)
            self.iface.removeToolBarIcon(action)

    # Velger hvilken excel fil som skal brukes til å definere tegnereglene i QGIS
    def velg_analyse_fil(self):
        filename, _filter = QFileDialog.getSaveFileName(
            self.dlg, "Velg analyse fil ",'', '*.xlsx')
        self.dlg.le_analyseFil.setText(filename)
        
    # Velger hvilken mappe de nye vektrolagene skal bli lagret i
    def velg_resultat_mappe(self):
        folder = QFileDialog.getExistingDirectory(self.dlg, "Velg mappe til nye vektorlag ", '')
        self.folder = folder + "/"
        self.dlg.le_nyeVektorlag.setText(self.folder)
        
    
    def run(self):
        """Run method that performs all the real work"""
      
        #Her er meny dialogen
        
        if self.first_start == True:
            self.first_start = False
            self.dlg = VAAnalyseDialog()
            self.dlg.pb_analyseFil.clicked.connect(self.velg_analyse_fil)           # Kjører "velg_analyse_fil" definisjonen når pb knappen blir brukt
            self.dlg.pb_nyeVektorlag.clicked.connect(self.velg_resultat_mappe)      # Kjører "velg_resultat_mappe" definisjonen når pb knappen blir brukt
        
        layers = QgsProject.instance().layerTreeRoot().children()
        
        self.dlg.cb_vlVektorlag.clear()
        self.dlg.cb_vlVektorlag.addItems([layer.name() for layer in layers])        # Lager en liste med alle tilgjenglige vektorlag
        self.dlg.sb_farge1.setValue(4)                                              # Setter en normal verdi for fargegruppene
        self.dlg.sb_farge2.setValue(2)                                              # Setter en normal verdi for fargegruppene
        self.dlg.sb_farge3.setValue(0.5)                                            # Setter en normal verdi for fargegruppene
        self.dlg.sb_farge4.setValue(0.25)                                           # Setter en normal verdi for fargegruppene
        
        self.dlg.show()                                                             # Viser menyen til plugin'en
        
        result = self.dlg.exec_()                                                   #Kjører meny dialgen 
        
        # Hvis OK var trykket så skjer dette:
        if result:                                                                  # Her er det som blir utført etter man trykker ok i menyen
            selectedLayerIndex = self.dlg.cb_vlVektorlag.currentIndex()             # Her blir det valgte vektolaget 'selected'
            selectedLayer = layers[selectedLayerIndex].layer()
            selectedLayer.renderer().symbol().symbolLayer(0).setColor(QColor("grey"))       # Det valgte vektorlaget blir farget grått
            selectedLayer.triggerRepaint()
            iface.layerTreeView().refreshLayerSymbology(selectedLayer.id())                 # Oppdaterer vektorlaget

            workbook = xlrd.open_workbook(self.dlg.le_analyseFil.text())            # Valgt Excel fil blir hentet fram
            worksheet = workbook.sheet_by_name('statistikk')                        # Riktig 'sheet' blir hentet
            worksheet2 = workbook.sheet_by_name('AlderOgDiameter')                  # Informasjon om Alder og Diamter blir hentet
            ald = worksheet2.cell(2, 1).value                                       # Alderen blir hentet fra Excel
            dim = worksheet2.cell(2, 2).value                                       # Diameteren blir hentet fra Excel
            D = {"d" : "0"}
            A = {"a" : "0"}
            D["d"] = str(int(dim))                                                  # Diameteren blir lagret som en liste
            A["a"] = str(int(ald))                                                  # Alderen blir lagret som en liste
            
            for gruppe, filter in filterObjekt.items():
                filter = FindReplace(filter,D)                                                # Diameter listen blir brukt til å erstatte 'd' parameteren i filteret
                filter = FindReplace(filter,A)                                                # Alder listen blir brukt til å erstatte 'a' parameteren i filteret
                LagShape(gruppe,filter,self.dlg.le_nyeVektorlag,selectedLayer)                # Det oppdaterte filteret blir brukt til å lage shape fil for de forksjellige gruppene
    
            Red    = self.dlg.sb_farge1.value()                                     # Den valgte verdien for inndeling av fargen til gruppene blir hentet
            Orange = self.dlg.sb_farge2.value()                                     # Den valgte verdien for inndeling av fargen til gruppene blir hentet
            Yellow = self.dlg.sb_farge3.value()                                     # Den valgte verdien for inndeling av fargen til gruppene blir hentet
            Green  = self.dlg.sb_farge4.value()                                     # Den valgte verdien for inndeling av fargen til gruppene blir hentet
            DarkGreen = 0                                                           # Den valgte verdien for inndeling av fargen til gruppene blir hentet
            
            I = 9
            verdiResultat = {}
            for i in range(I):
                verdiResultat[i] = worksheet.cell((i+4), 5).value                   # Verdiene for 'Lekkasjer pr 100 km pr år' blir hentet fra analyse filen i Excel 
            
            # Verdien hentet fra excel blir lagt sammen med riktig gruppe
            filterObjekt2 = {\
            '1.Eldre_Støp_Jern_stor_diameter'  : verdiResultat[0], \
            '2.Eldre_Støp_Jern_liten_diameter' : verdiResultat[1], \
            '3.Eldre_Plastikk_stor_diameter'   : verdiResultat[2], \
            '4.Eldre_Plastikk_liten_diameter'  : verdiResultat[3], \
            '5.Nyere_Støp_Jern_stor_diameter'  : verdiResultat[4], \
            '6.Nyere_Støp_Jern_liten_diameter' : verdiResultat[5], \
            '7.Nyere_Plastikk_stor_diameter'   : verdiResultat[6], \
            '8.Nyere_Plastikk_liten_diameter'  : verdiResultat[7], \
            '9.Annet_material'                 : verdiResultat[8]  \
            }
                  
            for gruppe, verdi in filterObjekt2.items():                             # Lager en loop for alle gruppene og resultat verdiene fra filterObjekt2 listen
                LagFarge(gruppe,verdi,Red,Orange,Yellow,Green,DarkGreen)            # Lager fargen til gruppene i de nye vektorlagene
             
            print(self.dlg.le_analyseFil.text())
            print(self.dlg.le_nyeVektorlag.text())
            
            self.myDialog = MyDialog(worksheet)                                     # Henter fram resultat tabellen
            self.myDialog.show()                                                    # Viser resultat tabellen


